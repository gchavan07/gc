1.Display total number of student in one class only:
> db.student.find({class:"cs"}).count()


2. Display the total number of student in both the class and maximum age from both class:




3. AGE>15 by using match:-
> db.student.aggregate([{$match:{age:{$gt:15}}}])


4.Sort the student on basis of age:-
> db.student.find().sort({age:-1}).pretty()


5.Create and display index on any field in student collection:
Create--
> db.student.createIndex({name:1})
Display--
> db.student.getIndexes()

1.Display total number of student in one class only:
> db.student.find({class:"cs"}).count()
2
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2,Display the total number of student in both the class and maximum age from both class:











------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.AGE>15 by using match:
> db.student.aggregate([{$match:{age:{$gt:15}}}])
{ "_id" : ObjectId("637864a2029d39bbb5bf5b2d"), "Name" : "Dinesh", "class" : "IT", "address" : "Osmanabad", "age" : 20, "Fees" : 55000 }
{ "_id" : ObjectId("637864d0029d39bbb5bf5b2e"), "Name" : "vinay", "class" : "cs", "address" : "lohara", "age" : 19, "Fees" : 100000 }
{ "_id" : ObjectId("63786522029d39bbb5bf5b30"), "Name" : "lakal", "class" : "IT", "address" : "murud", "age" : 20, "Fees" : 55266 }

> db.student.aggregate([{$match:{age:{$gt:19}}}])
{ "_id" : ObjectId("637864a2029d39bbb5bf5b2d"), "Name" : "Dinesh", "class" : "IT", "address" : "Osmanabad", "age" : 20, "Fees" : 55000 }
{ "_id" : ObjectId("63786522029d39bbb5bf5b30"), "Name" : "lakal", "class" : "IT", "address" : "murud", "age" : 20, "Fees" : 55266 }
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Sort the student on basis of age:-
> db.student.find().sort({age:-1}).pretty()
{
        "_id" : ObjectId("637864a2029d39bbb5bf5b2d"),
        "Name" : "Dinesh",
        "class" : "IT",
        "address" : "Osmanabad",
        "age" : 20,
        "Fees" : 55000
}
{
        "_id" : ObjectId("63786522029d39bbb5bf5b30"),
        "Name" : "lakal",
        "class" : "IT",
        "address" : "murud",
        "age" : 20,
        "Fees" : 55266
}
{
        "_id" : ObjectId("637864d0029d39bbb5bf5b2e"),
        "Name" : "vinay",
        "class" : "cs",
        "address" : "lohara",
        "age" : 19,
        "Fees" : 100000
}
{
        "_id" : ObjectId("637864f8029d39bbb5bf5b2f"),
        "Name" : "Govinda",
        "class" : "cs",
        "address" : "sambhajinagar",
        "age" : 15,
        "Fees" : 1000
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.Create and display index on any field in student collection:
> db.student.createIndex({name:1})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}
> db.student.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_"
        },
        {
                "v" : 2,
                "key" : {
                        "name" : 1
                },
                "name" : "name_1"
        }
]

